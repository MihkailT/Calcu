#include<iostream>
#include<cmath>
#include<stdexcept>
#include<Windows.h>

// Функции для ввода и вывода
std::pair<double, double> получитьЧисла() {
    double число1, число2;
    std::cout << "Введите два числа: "; // Просим пользователя ввести два числа
    std::cin >> число1 >> число2;
    return { число1, число2 };
}

char получитьОперацию() {
    char операция;
    std::cout << "Введите операцию (+, -, *, /): "; // Просим пользователя выбрать операцию
    std::cin >> операция;
    return операция;
}

void вывестиРезультат(double результат) {
    std::cout << "Результат: " << результат << std::endl; // Выводим результат
}

// Функции для арифметических операций
double сложение(double a, double b) {
    return a + b; // Складываем два числа
}

double вычитание(double a, double b) {
    return a - b; // Вычитаем второе число из первого
}

double умножение(double a, double b) {
    return a * b; // Умножаем два числа
}

double деление(double a, double b) {
    if (b == 0) {
        throw std::invalid_argument("Ошибка: Деление на ноль не допускается."); // Проверяем деление на ноль
    }
    return a / b; // Делим первое число на второе
}

// Функции для юнит-тестов
void тест_сложение() {
    double результат = сложение(2, 3);
    if (fabs(результат - 5) < 1e-9) {
        std::cout << "Тест для функции сложения пройден.\n"; // Проверяем корректность сложения
    }
    else {
        std::cout << "Тест для функции сложения не пройден. Ожидаемый результат: 5, Фактический результат: " << результат << "\n";
    }
}

void тест_вычитание() {
    double результат = вычитание(5, 3);
    if (fabs(результат - 2) < 1e-9) {
        std::cout << "Тест для функции вычитания пройден.\n"; // Проверяем корректность вычитания
    }
    else {
        std::cout << "Тест для функции вычитания не пройден. Ожидаемый результат: 2, Фактический результат: " << результат << "\n";
    }
}

void тест_умножение() {
    double результат = умножение(2, 3);
    if (fabs(результат - 6) < 1e-9) {
        std::cout << "Тест для функции умножения пройден.\n"; // Проверяем корректность умножения
    }
    else {
        std::cout << "Тест для функции умножения не пройден. Ожидаемый результат: 6, Фактический результат: " << результат << "\n";
    }
}

void тест_деление() {
    try {
        double результат = деление(6, 3);
        if (fabs(результат - 2) < 1e-9) {
            std::cout << "Тест для функции деления пройден.\n"; // Проверяем корректность деления
        }
        else {
            std::cout << "Тест для функции деления не пройден. Ожидаемый результат: 2, Фактический результат: " << результат << "\n";
        }
    }
    catch (const std::exception& e) {
        std::cerr << "Тест для функции деления не пройден. Исключение: " << e.what() << "\n";
    }
}

int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    // Калькулятор
    std::pair<double, double> числа = получитьЧисла();
    char операция = получитьОперацию();

    try {
        switch (операция) {
        case '+':
            вывестиРезультат(сложение(числа.first, числа.second)); // Выполняем сложение
            break;
        case '-':
            вывестиРезультат(вычитание(числа.first, числа.second)); // Выполняем вычитание
            break;
        case '*':
            вывестиРезультат(умножение(числа.first, числа.second)); // Выполняем умножение
            break;
        case '/':
            вывестиРезультат(деление(числа.first, числа.second)); // Выполняем деление
            break;
        default:
            std::cout << "Неверная операция.\n"; // Обрабатываем неверную операцию.
        }
    }
    catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }

    // Запуск юнит-тестов
    тест_сложение();
    тест_вычитание();
    тест_умножение();
    тест_деление();

    return 0;
}
